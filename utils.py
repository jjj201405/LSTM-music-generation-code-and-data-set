# -*- coding: UTF-8 -*-

import os
import subprocess
import pickle
import glob
from music21 import converter, instrument, note, chord, stream


def convert_midi_to_mp3():
    """
    Convert the MIDI file generated by the neural network to an MP3 file
    """
    input_file = 'output.mid'
    output_file = 'output.mp3'

    if not os.path.exists(input_file):
        raise Exception(f"MIDI file {input_file} does not exist in this directory. Please ensure the file is generated correctly.")

    print(f"Converting {input_file} to MP3")

    """
    Use timidity to generate an MP3 file
    # Note: Windows users may need to use alternative commands to convert MIDI to MP3
    # Note: Mac users might encounter errors with the libmp3lame option. They need to download and compile libmp3lame,
    # then recompile ffmpeg: http://blog.csdn.net/qinggebuyao/article/details/20933497
    # However, Mac users can directly play the generated MIDI file with the built-in GarageBand, which has better sound quality than MP3 generated by ffmpeg.
    """
    command = f'timidity {input_file} -Ow -o - | ffmpeg -i - -acodec libmp3lame -ab 64k {output_file}'
    return_code = subprocess.call(command, shell=True)

    if return_code != 0:
        print('An error occurred during conversion. Please check the error message.')
    else:
        print(f'Conversion complete. The generated file is {output_file}')


def get_notes():
    """
    Extract notes and chords from all MIDI files in the music_midi directory
    Note example: A, B, A#, B#, G#, E, ...
    Chord example: [B4 E5 G#5], [C5 E5], ...
    Since a chord is a collection of notes, we collectively refer to them as "notes"
    """
    # Ensure the music_midi folder containing all MIDI files is in the same directory as the Python files
    # You can customize the folder name and path as needed
    if not os.path.exists("music_midi"):
        raise Exception("The music_midi folder containing all MIDI files does not exist in this directory. Please add it.")

    notes = []

    # glob: Match all files that meet the criteria and return them as a list
    for midi_file in glob.glob("music_midi/*.mid"):
        stream_obj = converter.parse(midi_file)

        """
        Get all instrument parts.
        # Note: instrument.partitionByInstrument(stream_obj)
        # May throw an error in the latest Python3 version of Music21
        # No solution found yet; not documented in Music21 official documentation...
        """
        parts = instrument.partitionByInstrument(stream_obj)

        if parts:  # If there are instrument parts, take the first one
            notes_to_parse = parts.parts[0].recurse()
        else:
            notes_to_parse = stream_obj.flat.notes

        for element in notes_to_parse:
            # If it's a Note type, get its pitch
            if isinstance(element, note.Note):
                # Format example: E6
                notes.append(str(element.pitch))
            # If it's a Chord type, get the ordinals of its pitches
            elif isinstance(element, chord.Chord):
                # Converted format example: 4.15.7
                notes.append('.'.join(str(n) for n in element.normalOrder))

    # Create the data directory if it doesn't exist
    if not os.path.exists("data"):
        os.mkdir("data")
    # Write the data to the notes file in the data directory
    with open('data/notes', 'wb') as filepath:
        pickle.dump(notes, filepath)

    return notes


def create_music(prediction):
    """
    Generate a MIDI file from the music data 'predicted' by the neural network, then convert it to MP3
    """
    offset = 0   # Offset
    output_notes = []

    # Generate Note or Chord objects
    for data in prediction:
        # It's a chord. Format example: 4.15.7
        if ('.' in data) or data.isdigit():
            notes_in_chord = data.split('.')
            notes_list = []
            for current_note in notes_in_chord:
                new_note_obj = note.Note(int(current_note))
                new_note_obj.storedInstrument = instrument.Piano()  # Use piano instrument
                notes_list.append(new_note_obj)
            new_chord_obj = chord.Chord(notes_list)
            new_chord_obj.offset = offset
            output_notes.append(new_chord_obj)
        # It's a note
        else:
            new_note_obj = note.Note(data)
            new_note_obj.offset = offset
            new_note_obj.storedInstrument = instrument.Piano()
            output_notes.append(new_note_obj)

        # Increase the offset in each iteration to avoid overlapping
        offset += 0.5

    # Create a music stream
    midi_stream_obj = stream.Stream(output_notes)

    # Write to MIDI file
    midi_stream_obj.write('midi', fp='output.mid')

    # Convert the generated MIDI file to MP3
    convert_midi_to_mp3()